{"ast":null,"code":"var _jsxFileName = \"/home/ewen/Desktop/CPA_TME/TME7/src/components/v2/controller.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { updateModel, addEvent, createGameTest, winGame, loseGame } from \"./model\";\nimport { initView, drawAll } from \"./view\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initController = () => {\n  const newModel = createGameTest();\n  const newView = initView();\n  const controller = {\n    view: newView,\n    model: newModel\n  };\n  return controller;\n};\nexport const animate = controller => {\n  controller.model = updateModel(controller.model);\n  const {\n    view,\n    model\n  } = controller;\n  drawAll(view, model);\n\n  if (!winGame(model) && !loseGame(model)) {\n    requestAnimationFrame(() => animate(controller));\n  }\n};\nexport const setupEventListeners = controller => {\n  const view = controller.view;\n  controller.model; // Initializes event listeners for user interaction\n  // Right-click to start selecting triangles\n\n  view.canvas.addEventListener('mousedown', e => {\n    if (e.button === 2) {\n      // Right mouse button\n      e.preventDefault(); // Prevents the context menu from showing\n\n      controller.model = addEvent(controller.model, e);\n    }\n  }); // Drag to select an area\n\n  view.canvas.addEventListener('mousemove', e => {\n    if (controller.model.startSelec) {\n      controller.model = addEvent(controller.model, e);\n    }\n  }); // Release right-click to finalize selection\n\n  view.canvas.addEventListener('mouseup', e => {\n    if (e.button === 2 && controller.model.startSelec) {\n      controller.model = addEvent(controller.model, e);\n    }\n  }); // Left-click to move selected triangles\n\n  view.canvas.addEventListener('click', e => {\n    if (e.button === 0) {\n      // Left mouse button\n      controller.model = addEvent(controller.model, e);\n    }\n  }); // Prevents the context menu from showing on right-click\n\n  view.canvas.addEventListener('contextmenu', e => e.preventDefault());\n};\n\nconst StartGame = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const controller = initController();\n\n    if (canvasRef.current) {\n      controller.view.canvas = canvasRef.current; // Assuming initView assigns a canvas\n\n      setupEventListeners(controller);\n      animate(controller);\n    }\n  }, [height, width]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n};\n\n_s(StartGame, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = StartGame;\nexport default StartGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartGame\");","map":{"version":3,"sources":["/home/ewen/Desktop/CPA_TME/TME7/src/components/v2/controller.tsx"],"names":["useRef","useEffect","updateModel","addEvent","createGameTest","winGame","loseGame","initView","drawAll","initController","newModel","newView","controller","view","model","animate","requestAnimationFrame","setupEventListeners","canvas","addEventListener","e","button","preventDefault","startSelec","StartGame","height","width","canvasRef","current"],"mappings":"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","sourcesContent":["import { useRef, useEffect } from 'react'\n\nimport { OurModel, updateModel, addEvent, createGameTest, winGame, loseGame } from \"./model\";\nimport { initView, ViewRender, drawAll } from \"./view\";\n\n\nexport type OurController = {\n    view: ViewRender,\n    model: OurModel,\n};\n\nexport const initController = (): OurController => {\n    const newModel = createGameTest();\n    const newView = initView();\n    const  controller: OurController = {view : newView, model: newModel};\n    return controller;\n}\n\nexport const animate = (controller: OurController) => {\n    controller.model = updateModel(controller.model);\n    const { view, model } = controller;\n    drawAll(view, model);\n    if (!winGame(model) && !loseGame(model)) {\n        requestAnimationFrame(() => animate(controller));\n    }\n}\n\nexport const setupEventListeners= (controller : OurController) => {\n    const view = controller.view;\n    controller.model;\n    // Initializes event listeners for user interaction\n    \n    // Right-click to start selecting triangles\n    view.canvas.addEventListener('mousedown', e => {\n        if (e.button === 2) { // Right mouse button\n            e.preventDefault(); // Prevents the context menu from showing\n            controller.model = addEvent(controller.model, e);\n        }\n    });\n\n    // Drag to select an area\n    view.canvas.addEventListener('mousemove', e => {\n        if (controller.model.startSelec) {\n            controller.model = addEvent(controller.model, e);\n        }\n    });\n\n    // Release right-click to finalize selection\n    view.canvas.addEventListener('mouseup', e => {\n        if (e.button === 2 && controller.model.startSelec) {\n            controller.model = addEvent(controller.model, e);\n        }\n    });\n\n    // Left-click to move selected triangles\n    view.canvas.addEventListener('click', e => {\n        if (e.button === 0) { // Left mouse button\n            controller.model = addEvent(controller.model, e);\n        }\n    });\n\n    // Prevents the context menu from showing on right-click\n    view.canvas.addEventListener('contextmenu', e => e.preventDefault());\n}\n\nconst StartGame = ({height, width} : { height: number; width: number })=> {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        const controller = initController();\n        if (canvasRef.current) {\n            controller.view.canvas = canvasRef.current; // Assuming initView assigns a canvas\n            setupEventListeners(controller);\n            animate(controller);\n        }\n    }, [height, width]);\n\n    return <canvas ref={canvasRef} width={width} height={height} />;\n}\n\nexport default StartGame;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}