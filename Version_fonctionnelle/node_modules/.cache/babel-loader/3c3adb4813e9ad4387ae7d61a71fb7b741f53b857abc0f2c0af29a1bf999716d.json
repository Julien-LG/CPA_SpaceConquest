{"ast":null,"code":"export const initView = canvas => {\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('Impossible de récupérer le contexte 2D du canvas');\n  }\n\n  canvas.style.backgroundColor = 'black';\n  const view = {\n    canvas,\n    ctx\n  };\n  return view;\n};\n\nconst drawTriangle = (ctx, triangle) => {\n  // Dessine un triangle sur le canvas\n  ctx.beginPath();\n  ctx.moveTo(triangle.points[0].x, triangle.points[0].y);\n  triangle.points.forEach(point => ctx.lineTo(point.x, point.y));\n  ctx.closePath();\n  ctx.fillStyle = triangle.color;\n  ctx.fill(); // Si le triangle est slectionné, dessine un contour orange\n\n  if (triangle.selected) {\n    ctx.strokeStyle = 'orange';\n    ctx.lineWidth = 3;\n    ctx.stroke(); // Dessine le contour\n  }\n};\n\nconst drawCircle = (ctx, circle) => {\n  // Dessine un cercle sur le canvas\n  ctx.beginPath();\n  ctx.arc(circle.center.x, circle.center.y, circle.radius, 0, Math.PI * 2);\n  ctx.fillStyle = circle.color;\n  ctx.fill();\n  ctx.fillStyle = 'white';\n  ctx.font = '14px Arial';\n  ctx.fillText(`HP: ${circle.hp}`, circle.center.x - 20, circle.center.y + 5);\n};\n\nconst drawSelectionArea = (ctx, model) => {\n  const {\n    startSelec,\n    endSelec\n  } = model;\n\n  if (startSelec && endSelec) {\n    ctx.beginPath();\n    ctx.rect(startSelec.x, startSelec.y, endSelec.x - startSelec.x, endSelec.y - startSelec.y);\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    ctx.closePath();\n  }\n};\n\nexport const drawAll = (view, model) => {\n  const {\n    ctx\n  } = view;\n  ctx.clearRect(0, 0, view.canvas.width, view.canvas.height);\n  model.triangles.forEach(triangle => drawTriangle(ctx, triangle));\n  model.circles.forEach(circle => drawCircle(ctx, circle));\n  drawSelectionArea(ctx, model);\n};","map":{"version":3,"sources":["/home/ewen/Desktop/CPA_PROJETS/CPA_Projet/Version_fonctionnelle/src/components/Canvas/view.ts"],"names":["initView","canvas","ctx","getContext","Error","style","backgroundColor","view","drawTriangle","triangle","beginPath","moveTo","points","x","y","forEach","point","lineTo","closePath","fillStyle","color","fill","selected","strokeStyle","lineWidth","stroke","drawCircle","circle","arc","center","radius","Math","PI","font","fillText","hp","drawSelectionArea","model","startSelec","endSelec","rect","drawAll","clearRect","width","height","triangles","circles"],"mappings":"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","sourcesContent":["import {Triangle, Circle, OurModel} from './model';\n\nexport type ViewRender = {\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n};\n\nexport const initView = (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        throw new Error('Impossible de récupérer le contexte 2D du canvas');\n    }\n    canvas.style.backgroundColor = 'black';\n    const view: ViewRender = { canvas, ctx };\n    return view;\n};\n\nconst drawTriangle = (ctx: CanvasRenderingContext2D, triangle: Triangle) => {\n    // Dessine un triangle sur le canvas\n    ctx.beginPath();\n    ctx.moveTo(triangle.points[0].x, triangle.points[0].y);\n    triangle.points.forEach(point => ctx.lineTo(point.x, point.y));\n    ctx.closePath();\n    ctx.fillStyle = triangle.color;\n    ctx.fill();\n\n    // Si le triangle est slectionné, dessine un contour orange\n    if (triangle.selected) {\n        ctx.strokeStyle = 'orange';\n        ctx.lineWidth = 3; \n        ctx.stroke(); // Dessine le contour\n    }\n}\n\nconst drawCircle = (ctx: CanvasRenderingContext2D, circle: Circle) => {\n    // Dessine un cercle sur le canvas\n    ctx.beginPath();\n    ctx.arc(circle.center.x, circle.center.y, circle.radius, 0, Math.PI * 2);\n    ctx.fillStyle = circle.color;\n    ctx.fill();\n\n    ctx.fillStyle = 'white';\n    ctx.font = '14px Arial';\n    ctx.fillText(`HP: ${circle.hp}`, circle.center.x - 20, circle.center.y + 5);\n}\n\nconst drawSelectionArea = (ctx: CanvasRenderingContext2D, model: OurModel) => {\n    const { startSelec, endSelec } = model;\n    if (startSelec && endSelec) {\n        ctx.beginPath();\n        ctx.rect(startSelec.x, startSelec.y, endSelec.x - startSelec.x, endSelec.y - startSelec.y);\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 3; \n        ctx.stroke();\n        ctx.closePath();\n    }\n}\n\nexport const drawAll = (view: ViewRender, model: OurModel) => {\n    const { ctx } = view;\n    ctx.clearRect(0, 0, view.canvas.width, view.canvas.height);\n    model.triangles.forEach(triangle => drawTriangle(ctx, triangle));\n    model.circles.forEach(circle => drawCircle(ctx, circle));\n    drawSelectionArea(ctx, model);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}